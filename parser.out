Grammar:

Rule 0     S' -> E
Rule 1     E -> E * T
Rule 2     E -> T
Rule 3     T -> T + F
Rule 4     T -> F
Rule 5     F -> N

Terminals, with rules where they appear:

*                    : 1
+                    : 3
N                    : 5
error                : 

Nonterminals, with rules where they appear:

E                    : 1 0
F                    : 3 4
T                    : 1 2 3


state 0

    (0) S' -> . E
    (1) E -> . E * T
    (2) E -> . T
    (3) T -> . T + F
    (4) T -> . F
    (5) F -> . N
    N               shift and go to state 4

    E                              shift and go to state 1
    T                              shift and go to state 2
    F                              shift and go to state 3

state 1

    (0) S' -> E .
    (1) E -> E . * T
    *               shift and go to state 5


state 2

    (2) E -> T .
    (3) T -> T . + F
    *               reduce using rule 2 (E -> T .)
    $end            reduce using rule 2 (E -> T .)
    +               shift and go to state 6


state 3

    (4) T -> F .
    +               reduce using rule 4 (T -> F .)
    *               reduce using rule 4 (T -> F .)
    $end            reduce using rule 4 (T -> F .)


state 4

    (5) F -> N .
    +               reduce using rule 5 (F -> N .)
    *               reduce using rule 5 (F -> N .)
    $end            reduce using rule 5 (F -> N .)


state 5

    (1) E -> E * . T
    (3) T -> . T + F
    (4) T -> . F
    (5) F -> . N
    N               shift and go to state 4

    T                              shift and go to state 7
    F                              shift and go to state 3

state 6

    (3) T -> T + . F
    (5) F -> . N
    N               shift and go to state 4

    F                              shift and go to state 8

state 7

    (1) E -> E * T .
    (3) T -> T . + F
    *               reduce using rule 1 (E -> E * T .)
    $end            reduce using rule 1 (E -> E * T .)
    +               shift and go to state 6


state 8

    (3) T -> T + F .
    +               reduce using rule 3 (T -> T + F .)
    *               reduce using rule 3 (T -> T + F .)
    $end            reduce using rule 3 (T -> T + F .)
